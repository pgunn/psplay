#!/usr/bin/python

import argparse
import lockfile
import subprocess
import sys

###########
# psplay_client is the "client" component of psplay - it runs frequently from
# cron, and iterates over all registered splaykeys for this system. Registered
# by config management.
#
# Operational model:
#	A splaykey (skey) is used to define host-specific splay for 1+
#		services that use that splaykey
#	psplay_client schedules "atservices" at defined times using the
#		appropriate splaykey and the atservice definition as a factor
#		for when things run
#	Splaykeys come from outside the system, and psplay_client responds
#		to those by adjusting when things run, in a way that's kind to
#		the reasons people splay in the first place
#
# For each such splaykey:
#	Read the old attribute from the local cache (if present!)
#	Read the new attribute from mdb (if present!)
#	Update the local cache
#	Reason about moratoriums statefully
#	Determine from those when it should next be scheduled
#	Determine if it already is so scheduled
#	If it is:
#		Everything is great
#	Otherwise:
#		Cancel any existing scheules of it
#		Schedule it correctly
#
# Data it works with:
#	machine tagging database - reads
#	moratorium file
#	old attribute cache
#	at - reads, schedules, cancels

def main():
	cfg = handle_args()
	mylock = get_lockfile(cfg.lockfile)
	for skey in get_skey_list():
		# Process this host's skeys
		expire_old_moratoriums(skey)
		oldval = get_offset_for_skey_cache(skey)
		newval = get_offset_for_skey_mtag(skey)
		if oldval != newval: # Be careful comparing fractions!
			cache_setval(skey, newval)
			for service in services_linked_to_key(skey):
				if atservice_scheduled(skey, service):
					deschedule_atservice(service)
			if newval < oldval:
				set_moratorium(skey, oldval, newval)
		if (! in_moratorium(skey)):
			for service in services_linked_to_key(skey):
				if !atservice_scheduled(skey, service):
					schedule_atservice(service)
	release_lockfile(mylock)

def handle_args():
	# cfg.cachefile
	pass


###################
# skeylist operations

def get_skey_list():
	pass

###################
# service enumeration

def services_linked_to_key(skey):
	pass

def deschedule_atservice(service):
	pass

def schedule_atservice(service):
	pass

def atservice_scheduled(skey, service):
	pass

def get_service_offset(skey, service):
	return (get_skey_value(skey) * get_skey_offset_for_this_host(skey)) +
		get_service_offset(service)


###################
# moratorium operations

def set_moratorium(skey, oldval, newval):
	pass

def expire_old_moratoriums(skey):
	pass

def in_moratorium(skey):
	pass

###################
# at operations

###################
# cfgdir operations

###################
# local mtag cache operations

def get_offset_for_skey_cache(skey):
	pass

def cache_setval(skey, newval):
	pass

###################
# mtag operations

def get_offset_for_skey_mtag(skey):
	pass

###################
# lockfile operations

def get_lockfile(lf):
	# See psplay_server
	lock = LockFile(lf)
	lock.acquire(timeout=30) # seconds
	return lock

def release_lockfile(lock):
	lock.release()

###################

main()
