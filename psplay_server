#!/usr/bin/python

import argparse
import json
import subprocess
import sys

############
# psplay_server is the "server" component of psplay - it runs periodically
# from cron, and iterates over all registered splaykeys.
#
# For each splaykey:
#   gets a list of servers that are part of the fleet for a service, and
#   if that has changed:
#   1) If a host has been replaced but the number of servers in the fleet stays
#	the same, give the replacement host the splaykey that its
#	predecessor had. This avoids the need to shift times around.
#   2) If a host has been removed or added, renumber everybody! We change host
#	attributes immediately (could stage it, but that'd make this script
#	more complex and with little benefit - revisit this decision if needed)
#
# Data it works with:
#   machine tagging database - reads and writes, accessible instantly from any
#	host. Let's not depend on any particular one.
#   cache from last mdb read/write
#
# The psplay_server only cares about splay keys, not about what clients do with
# them

def main():
	cfg = handle_args()
	get_lockfile(cfg.lockfile)
	for skey in get_skey_list(cfg.skeyfile):
		# Rebalance global skeys
		hosts    = get_hosts_for_skey_mtag(skey)
		oldhosts = get_hosts_for_skey_cache(skey, cfg.cachefile)
		if hosts_same(hosts, oldhosts):
			continue
		elif num_hosts_same(hosts, oldhosts):
			cache = skey_getcache(cfg.cachefile)
			successors_keyswap(skey, cache, hosts, oldhosts) # updates cache obj and mtags
			cache_store(cache, cfg.cachefile)
		else:
			cache = skey_getcache(cfg.cachefile)
			rekey_all_hosts(skey, hosts, cache) # updates cache obj
			cache_store(cache, cfg.cachefile)
	release_lockfile()

def handle_args():
	optmsgs = {
	"cachefile" : "JSON storage for local cache",
	"skeyfile" : "List of service keys to reason about, 1 per line",
	"lockfile" : "Lockfile",
	}
	parser = argparse.ArgumentParser()
	parser.add_argument('--lockfile', help=optmsgs['lockfile'],
		default='/var/lock/psplay')
	parser.add_argument('--cachefile', help=optmsgs['cachefile'],
		default='/var/run/psplay.json')
	parser.add_argument('--skeyfile', help=optmsgs['skeyfile'],
		default='/var/run/skeys.txt')
	return parser.parse_args()

#####################
# skeylist operations
#
# not sure how I want this to work

def get_skey_list(skeyfile):
	pass

#####################
# Hostlist operations

def hosts_same(first, second):
	# Bool: True if two hostlists are the same
	# It changes list order, but that is ok
	first.sort()
	bar.sort()
	return foo == bar

def num_hosts_same(first, second):
	# Bool: True if two hostlists have same number of elements
	return len(first) == len(second)

#####################
# operations
def successors_keyswap(skey, cache, hosts, oldhosts):
	""" RW, Alter cache and mtag store so new hosts will each
	exactly replace a retired host. This assumes the number of new
	hosts equals the number of retired hosts. """
	exclusive_new = set(hosts) - set(oldhosts)
	exclusive_old = set(oldhosts) - set(hosts)
	for idx in range(0, len(exclusive_old) - 1):
		# Copy old to new
		val = cache_get_skey_hostval(cache, skey, exclusive_old[idx])

		cache_set_skey_hostval(cache, skey, exclusive_new[idx], val)
		mtag_set_skey_hostval(skey, exclusive_new[idx], val)
		# Delete old
		cache_clear_skey_hostval(cache, skey, exclusive_old[idx])
		mtag_clear_skey_hostval(skey, exclusive_old[idx])

def rekey_all_hosts(skey, hosts, cache):
	""" RW, rewrite cache object and mtag-sync as we go.
	This is used when we need to re-offset everything. """
	num_elems = len(foo)
	if num_elems == 0:
		return # Nothing to do, and let's not divide by zero
	# If we want to avoid the guarantee of one system starting on-the-dot,
	# we could bump ctr by a random fp-in-range-0-1 value here,
	# and at the start of the loop reduce ctr by 1 if it's over 1. As a poor
	# man's modulus. Because offsets on this side of psplay
	# are subdivisions of "1", that would do the right thing
	offset = 1 / num_elems
	ctr = 0
	for host in hosts:
		cache_set_skey_hostval(cache, skey, host, ctr)
		mtag_set_skey_hostval(skey, host, ctr)
		ctr += offset # Prep for next

#####################
# mtag operations

def get_hosts_for_skey_mtag(skey):
	""" RO """
	pass

def mtag_set_skey_hostval(skey, host, val):
	pass

def mtag_clear_skey_hostval(skey, host):
	pass

#####################
# cache operations
#
# The cache is a json file with the following structure
# skey => 	[
#		host = offset_percent,
#		...
#		]
# hash stored inside

def skey_getcache(cachejson):
	with open(cachejson) as json_d:
		cache = json.load(json_d)
		json_d.close()
	return cache

def get_hosts_for_skey_cache(skey, cachejson):
	""" RO """
	cache = skey_getcache(cachejson)
	return cache[skey].keys()

def cache_store(cacheobj, cachejson):
	""" W """
	with open(cachejson, 'w') as json_d:
		json.dump(cacheobj, json_d)
		json_d.close()

def cache_clear_skey_hostval(cache, skey, host):
	del cache[skey][host]

def cache_set_skey_hostval(cache, skey, host, val):
	cache[skey][host] = val

def cache_get_skey_hostval(cache, skey, host):
	return cache[skey][host]

#####################
# lockfile operations

def get_lockfile():
	pass

def release_lockfile():
	pass

#####################

main()
